#!/usr/bin/env perl
use warnings;
use strict;

# standard libraries
use File::Find qw(find);
use File::Basename;

# environment library
# loads same variables used by web server
use Dotenv -load => '../.env';

# custom libraries
use PDB;
use PDB::Bonds;
use XML::In;

# these libraries interact with external programs
use WhatIf;
use MSMS;
use HAAD;
use HBplus;
use Email;
use Sheet;

##################################################################
# Parse configuration file and command-line options
##################################################################

# Check that there's even arguments
if(!$ARGV[0]){
    die "Must pass job_id and debug flag (optional) as arguments\nFor example: ./monster_web 27rv13g098 0\n";
}

# Will check job id for presence of directory and XML file later
my $job=$ARGV[0];

# Check debug flag to change logging
my $debug=0;
if($ARGV[1]){
    if($ARGV[1] =~ /^[01]$/){
	$debug=$ARGV[1];
    }else{
	die "Second argument for debug flat must be 0/1\n";
    }
}

# Testing directory structure and files
my $uploadsDir = '/home/monster_uploads/upload/';
if(exists($ENV{'UPLOAD_DIR'})){
    $uploadsDir = $ENV{"UPLOAD_DIR"}."/";
}
if(!-d $uploadsDir){
    die "$uploadsDir doesn't exist\n";
}

my $jobsDir = '/home/monster_uploads/jobs/';
if(exists($ENV{'JOBS_DIR'})){
    $jobsDir = $ENV{"JOBS_DIR"}."/";
}
if(!-d $jobsDir){
    die "$jobsDir doesn't exist\n";
}

my $logsDir = '/home/monster_uploads/jobs/';
if(exists($ENV{'LOGS_DIR'})){
    $logsDir = $ENV{"LOGS_DIR"}."/";
}
if(!-d $logsDir){
    die "$logsDir doesn't exist\n";
}

# Redirect output for logging
if(!$debug){
    open SAVEERR, ">&STDERR";
    open SAVEOUT, ">&STDOUT";
    $|=1;
    print SAVEERR "";
    print SAVEOUT "";
    open( STDERR, ">> ".$logsDir."/".$job.".log" ) or die "\ncouldn't redirect STDERR to Log: $! ";
    open( STDOUT, ">& STDERR" ) or die "\ncouldn't redirect STDOUT to STDERR: $! ";
}

my $jobDir .= $jobsDir.'/'.$job.'/';
if(!-d $jobDir){
    die "$job: $jobDir doesn't exist\n";
}

my $xmlFile = $jobDir.$job.".xml";
if(!-f $xmlFile){
    die "$job: couldnt find the required xml file in $jobDir!\n";
}

# Parsing XML file into the object
my $xml_obj = new XML::In($xmlFile) if $xmlFile;
if(!defined($xml_obj)){
    die "$job: couldnt parse $xmlFile!\n";
}

if(!-f $uploadsDir.$xml_obj->getFile()){
    die "$job: PDB file (".$uploadsDir.$xml_obj->getFile().") not found\n";
}
print("$job: starting ".$xml_obj->getFile()." at: ".scalar(localtime)."\n");

##################################################################
# Start actual job
##################################################################

# Ignoring use of DB for time being
# WebDBI->start($job,$xml_obj) if !$debug;

my $Bonds;
my $PDB = new PDB;

##################################################################
# Re-write PDB file so that it works with WhatIf: will be discontinued
##################################################################

#$PDB->wiWrite($uploadsDir.$xml_obj->getFile(),$jobsDir,$xml);
#print "WhatIf file written\n";

##################################################################
# Run HAAD
##################################################################

print("$job: copying ".$xml_obj->getFile()." at: ".scalar(localtime)."\n");
#HAAD->run($PDB,$upload_file.$xml_obj->getFile());
system("cp ".$uploadsDir.$xml_obj->getFile()." ".$jobDir);

##################################################################
# Iterate through conformations (not actually used)
##################################################################
my $result = undef;
foreach my $file (get_pdb_files($jobDir)){
    my $c = substr($file, -5, 1);
    $c = '' if $c eq 'i'; #no conformations if find last letter of 'wi'
    $c = ''; #ignoring conformations

##################################################################
# Process protons using WhatIf (To be Replaced by HAAD)
##################################################################

#    if($xml->getProtons){
#	print $file,"\tRedoing Protons\n";
#	$file = WhatIf->doWhatif($file,$PDB); #file updated to be WhatIf output
#    }

#    WebDBI->whatif($job) if !$debug;

##################################################################
# Parse PDB file and calculate interatomic interactions
##################################################################

    print("$job: parsing ".$file." at: ".scalar(localtime)."\n");
    $Bonds = new PDB::Bonds();
    $PDB->parse($jobDir.$file, $xml_obj, $Bonds);
    print("$job: parsed ".$file." at: ".scalar(localtime)."\n");

##################################################################
# Iterate through models
##################################################################

    my $models = $PDB->getModels;
#    WebDBI->parse($job, $models, $xml->chains()) if !$debug;

    my $tempDir;
    for(my $i=1;$i<=$models;$i++){

##################################################################
# Make a new results directory for each model
##################################################################

	$tempDir = $jobDir.$c.$i.'/';
	mkdir $tempDir or warn "couldn't make $tempDir: $!\n";
	chdir $tempDir or die "couldn't chdir $tempDir: $!\n"; #Dies if cant chdir

##################################################################
# Iterate through chainpairs in model
##################################################################

	$PDB->setModel($i);
	foreach my $cp (sort $PDB->chainPairs){
#	    WebDBI->set_model($job,$i,$cp) if !$debug;

##################################################################
# Run MSMS
##################################################################

#	    MSMS->doMSMS($PDB,$tempDir,unpack('AA', $cp),$xml);
#	    WebDBI->set_time($job,$i,$cp,'msms') if !$debug;

##################################################################
# Run HBPlus
##################################################################

#	    HBplus->doHBplus($PDB,$tempDir,unpack('AA', $cp),$xml,$Bonds);
#	    WebDBI->set_time($job,$i,$cp,'hbplus') if !$debug;

##################################################################
# Print all interatomic interactions
##################################################################

	    $Bonds->printBonds($PDB,$tempDir.$cp.'bonds.txt',$i,unpack('AA', $cp));
	    $Bonds->printXMLBonds($PDB,$tempDir.$cp.'bonds.xml',$i,unpack('AA', $cp));
#	    WebDBI->set_time($job,$i,$cp,'print_bonds') if !$debug;
	    $result = $tempDir.$cp.'bonds.txt' unless $result;
#	    WebDBI->result($job,$i,$cp, $result) if !$debug;
	}
    }

##################################################################
# Process results if multiple models
##################################################################

    #process averages
    if($models > 1){
	my @jobfiles=();
	foreach my $cp (sort $PDB->chainPairs){
	    $Bonds->printModelCount($PDB, $jobsDir.$cp.$c.'consensus.txt', ($models/2), unpack('AA', $cp));
	    $Bonds->printXMLModelCount($PDB, $jobsDir.$cp.$c.'consensus.xml', ($models/2), unpack('AA', $cp));
	    $result = $jobsDir.$cp.$c.'consensus.txt';
	    push(@jobfiles,$result);
	}
	Email->resultEmail($job, $xml_obj->getEmail, $xml_obj->getFile(), @jobfiles) if !$debug;
	Sheet->generate_sheet(@jobfiles);
    }else{
	Email->resultEmail($job, $xml_obj->getEmail, $xml_obj->getFile(), get_text_results($jobDir.'/1')) if !$debug;
    }
#    WebDBI->print($job) if !$debug;
} #end of get_files loop
# WebDBI->end($job) if !$debug;
print("$job: finishing ".$xml_obj->getFile()." at: ".scalar(localtime)."\n");
exit(0);

####################################################################
# Utility subroutines

sub get_pdb_files{
    my $dir = shift;
    opendir(my $dh, $dir) || die "can't opendir $dir: $!";
    my @files = grep { $_ =~ /\.pdb$/ && $_ ne "out.pdb"} readdir($dh);
    closedir $dh;

    return @files;
}

sub get_xml{
    opendir(my $dh, $jobsDir) || die "can't opendir $jobsDir: $!";
    my $file = (grep { $_ =~ /\.xml/ } readdir($dh))[0];
    closedir $dh;

    return $file;
}

sub get_text_results{
    my $dir = shift;
    opendir(my $dh, $dir) || die "can't opendir $dir: $!";
    my @files = grep { $_ =~ /\.txt$/ } readdir($dh);
    closedir $dh;

    return @files;
}

sub get_excel_results{
    my $dir = shift;
    opendir(my $dh, $dir) || die "can't opendir $dir: $!";
    my @files = grep { $_ =~ /\.xls$/ } readdir($dh);
    closedir $dh;

    return @files;
}

sub get_consensus_results{
    my $dir = shift;
    opendir(my $dh, $dir) || die "can't opendir $dir: $!";
    my @files = grep { $_ =~ /consensus\.txt$/ } readdir($dh);
    closedir $dh;

    return @files;
}
