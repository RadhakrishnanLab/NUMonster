#!/usr/bin/env perl
use warnings;
use strict;

# find custom libraries in same directory
use FindBin 1.51 qw( $RealBin );
use lib $RealBin;

# standard libraries
use File::Find qw(find);
use File::Basename;

# environment library
# loads same variables used by web server
use Dotenv -load => '../.env';

# custom libraries
use PDB;
use PDB::Bonds;
use XML::In;

# these libraries interact with external programs
use MSMS;
use HAAD;
use REDUCE;
use HBplus;
use Email;
use Sheet;

##################################################################
# Parse configuration file and command-line options
##################################################################

# Check that there's even arguments
if(!$ARGV[0]){
    die "Must pass job_id and debug flag (optional) as arguments\nFor example: ./monster_web 27rv13g098 0\n";
}

# Will check job id for presence of directory and XML file later
my $job=$ARGV[0];

# Check debug flag to change logging
my $debug=0;
if($ARGV[1]){
    if($ARGV[1] =~ /^[01]$/){
	$debug=$ARGV[1];
    }else{
	die "Second argument for debug flat must be 0/1\n";
    }
}
$debug = 1 if $job eq "perl_test";

# Testing directory structure and files
my $uploadsDir = '/home/monster_uploads/upload/';
if(exists($ENV{'UPLOAD_DIR'})){
    $uploadsDir = $ENV{"UPLOAD_DIR"};
}
$uploadsDir.="/" if $uploadsDir !~ /\/$/;
if(!-d $uploadsDir){
    die "$uploadsDir doesn't exist\n";
}

my $jobsDir = '/home/monster_uploads/jobs/';
if(exists($ENV{'JOBS_DIR'})){
    $jobsDir = $ENV{"JOBS_DIR"};
}
$jobsDir.="/" if $jobsDir !~ /\/$/;
if(!-d $jobsDir){
    die "$jobsDir doesn't exist\n";
}

my $logsDir = '/home/monster_uploads/logs/';
if(exists($ENV{'LOGS_DIR'})){
    $logsDir = $ENV{"LOGS_DIR"};
}
$logsDir.="/" if $logsDir !~ /\/$/;
if(!-d $logsDir){
    die "$logsDir doesn't exist\n";
}

# Redirect output for logging
if(!$debug){
    open SAVEERR, ">&STDERR";
    open SAVEOUT, ">&STDOUT";
    $|=1;
    print SAVEERR "";
    print SAVEOUT "";
    open( STDERR, ">> ".$logsDir."/".$job.".log" ) or die "\ncouldn't redirect STDERR to Log: $! ";
    open( STDOUT, ">& STDERR" ) or die "\ncouldn't redirect STDOUT to STDERR: $! ";
}

# Testing for output of web server
my $jobDir = $jobsDir.$job.'/';
if(!-d $jobDir){
    die "$job: $jobDir doesn't exist\n";
}

my $xmlFile = $jobDir.$job.".xml";
if(!-f $xmlFile){
    die "$job: couldnt find the required xml file in $jobDir!\n";
}

# Parsing XML file into the object
my $xml_obj = new XML::In($xmlFile) if $xmlFile;
if(!defined($xml_obj)){
    die "$job: couldnt parse $xmlFile!\n";
}

# Arranging directory for output of perl backend
my $original_pdb_file = $xml_obj->getFile();
if(!-f $uploadsDir.$original_pdb_file){
    die "$job: PDB file (".$uploadsDir.$original_pdb_file.") not found\n";
}
print("$job: copying ".$uploadsDir.$original_pdb_file." to ".$jobDir." at: ".scalar(localtime)."\n");
system("cp ".$uploadsDir.$original_pdb_file." ".$jobDir);

# original_pdb_file contains upload timestamp directory name so remove
my $job_pdb_file = (split('/',$original_pdb_file))[-1];

##################################################################
# Start actual job
##################################################################

print("$job: starting ".$job_pdb_file." at: ".scalar(localtime)."\n");

##################################################################
# Iterate through conformations (not actually used)
##################################################################
foreach my $file (get_files($jobDir,"\.pdb")){
    my $c = substr($file, -5, 1);
    $c = '' if $c eq 'i'; #no conformations if find last letter of 'wi'
    $c = ''; #ignoring conformations

##################################################################
# Parse PDB file and calculate interatomic interactions
##################################################################

    print("$job: parsing ".$file." at: ".scalar(localtime)."\n");
    my $Bonds = new PDB::Bonds();
    my $PDB = new PDB;
    $PDB->parse($jobDir.$file, $xml_obj, $Bonds);
    print("$job: parsed ".$jobDir.$file." at: ".scalar(localtime)."\n");
    print("PDB contains chains: \n");
    foreach my $chain (sort keys %{$PDB->{'chains'}}){
	print("\t",$chain,"\t",$PDB->{'chains'}{$chain},"\n");
    }

##################################################################
# Replace/correct protons
##################################################################

    my $protonDir = $jobDir.'protons/';
    if(-d $protonDir){
	unlink $protonDir;
    }
    mkdir $protonDir;

    # strip all protons
    $PDB->stripProtons();

    #start new PDB file
    if(-f $protonDir."new_protons.pdb"){
	unlink($protonDir."new_protons.pdb");
    }

    print("$job: replacing protons for ".$jobDir.$file." at: ".scalar(localtime)."\n");

    # Print out all separate parts of PDB file to replace protons in
    foreach my $model (sort {$a<=>$b} $PDB->getModels()){
	foreach my $chain (sort $xml_obj->chains()){
	    print "Writing $model$chain for replacing protons\n";
	    PDB::Writer->write('model'=>$model,
			       'path'=>$protonDir.$model.$chain.".pdb",
			       'chains'=>[$chain],'pdb'=>$PDB,'xml'=>$xml_obj);
	    REDUCE->run($protonDir.$model.$chain.".pdb", $protonDir.$model.$chain.".log");
	    if(-f $protonDir.$model.$chain.".pdb.new"){
		system("cat ".$protonDir.$model.$chain.".pdb.new >> ".$protonDir."all_new_protons.pdb");
	    }
	}
    }

    $PDB = new PDB;
    $Bonds = new PDB::Bonds();
    $PDB->parse($protonDir."all_new_protons.pdb", $xml_obj, $Bonds);

    print("New PDB contains chains: \n");
    foreach my $chain (sort keys %{$PDB->{'chains'}}){
	print("\t",$chain,"\t",$PDB->{'chains'}{$chain},"\n");
    }
    print("Models: ",join("|",sort {$a <=> $b} $PDB->getModels()),"\n");

##################################################################
# Iterate through models
##################################################################

    my $models = $PDB->getModels;

    for(my $i=1;$i<=$models;$i++){

##################################################################
# Make a new results directory for each model
##################################################################

	my $tempDir = $jobDir.$c.$i.'/';
	if(-d $tempDir){
	    unlink $tempDir;
	}
	mkdir $tempDir;

##################################################################
# Iterate through chainpairs in model
##################################################################

	$PDB->setModel($i);
	foreach my $cp (sort $xml_obj->chainpairs){

##################################################################
# Run MSMS (xml_obj needed to find user-defined end of chains)
##################################################################

	    print("$job: running MSMS for ".$i.$cp." at: ".scalar(localtime)."\n");

	    MSMS->doMSMS($PDB,$tempDir,unpack('AA', $cp),$xml_obj);

##################################################################
# Run HBPlus
##################################################################
	    
	    print("$job: running HBplus for ".$i.$cp." at: ".scalar(localtime)."\n");

	    HBplus->doHBplus($PDB,$tempDir,unpack('AA', $cp),$xml_obj,$Bonds);

##################################################################
# Print all interatomic interactions
##################################################################

	    print("$job: printing $cp analysis for ".$file." at: ".scalar(localtime)."\n");
	    $Bonds->printBonds($PDB,$tempDir.$cp.'bonds.txt',$i,unpack('AA', $cp));
	    $Bonds->printXMLBonds($PDB,$tempDir.$cp.'bonds.xml',$i,unpack('AA', $cp));
	}
    }

##################################################################
# Process results if multiple models
##################################################################

    #process averages
    if($models > 1){
	my @jobfiles=();
	foreach my $cp (sort $PDB->chainPairs){
	    $Bonds->printModelCount($PDB, $jobDir.$cp.$c.'consensus.txt', ($models/2), unpack('AA', $cp));
	    $Bonds->printXMLModelCount($PDB, $jobDir.$cp.$c.'consensus.xml', ($models/2), unpack('AA', $cp));
	    my $result = $jobDir.$cp.$c.'consensus.txt';
	    push(@jobfiles,$result);
	}
	Email->resultEmail($job, $xml_obj->getEmail, $file, @jobfiles) if !$debug;
	Sheet->generate_sheet(@jobfiles);
    }else{
	my @jobfiles=();
	foreach my $file (get_files($jobDir.'1',"\.txt")){
	    push(@jobfiles,$jobDir.'1/'.$file);
	}
	Email->resultEmail($job, $xml_obj->getEmail, $file, @jobfiles) if !$debug;
    }
} #end of get_files loop
print("$job: finishing ".$original_pdb_file." at: ".scalar(localtime)."\n");
exit(0);

####################################################################
# Utility subroutine

sub get_files{
    my $dir = shift;
    my $suffix = shift;
    opendir(my $dh, $dir) || die "can't opendir $dir: $!";
    my @files = grep { $_ =~ /${suffix}$/} readdir($dh);
    closedir $dh;

    return @files;
}
